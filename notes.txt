These will let you setup version control locally.
$ git config --global user.name "Your Name"
$ git config --global user.email "you@youraddress.com"
$ git config --global push.default matching
$ git config --global alias.co checkout
$ git init


good link on deploying to heroku
https://devcenter.heroku.com/articles/getting-started-with-nodejs?singlepage=true


api testing code

app.get('/api/test', (req, res) => {
    return res.send(process.env.HERE_API_KEY);
})

// default URL for website
app.use('/test', function (req, res) {
    res.sendFile(path.join(__dirname + '/public/test.html'));
    //__dirname : will resolve to your project folder.
});


// default URL for website
app.use('/', function (req, res) {
    res.sendFile(path.join(__dirname + '/public/indx.html'));
    //__dirname : will resolve to your project folder.
});



some clean up from index.js

//Handle bar testing
// const HBtestString = "this is my initial test string for handlebar testing";
// const cityNames = [ 'New York', 'Paris', 'Los Angeles', 'San Francisco', 'Seattle', 'Portland', 'Chicago', 'Dallas', 'Mami', 'Phoenix', 'Tucson', 'Nogales' ]

// const test = ['test', 'test2', 'test3']

//Require our routes.

//Setup starter data.
// app.get('/', (req, res)=>{
//     res.render('home', {
//         hbout1: HBtestString,
//         city: cityNames,
//     });
// })



//took this out of FE_Logic.js
       var wData = template({
           name: data[0].city.name,
           country: data[0].city.country,
           population: data[0].city.population,
           uvIndex: data[1][0].value,
           timezone: data[0].city.timezone 
        });

 const weather = '{{uvIndex}} {{country}}' + 
        '{{population}} {{timezone}}';

//const template = Handlebars.compile(weather);



//put this aside until we find a method to get text from our table
    
        //check if city name is in the history list if it is dont add the name
        const cities = $("#tabelBody").contents().filter(function(){ 
            return this.nodeType === 3;  //
        });
        
        console.log("cities is type of: " + typeof(cities))
        let found = false;
        for(let i = 0; i < cities.length; i++)
        {   
            console.log("searching" + String(cities[i]))
            if(String(cities[i].getElementById) === cityStr) found ===true;
        }

        if(!found){
            const cty = '<tr>' + '<td id="' + cityStr + '">' + cityStr + '</td>' + '</tr>'
            $('#tabelBody').prepend(cty);    
        }else{
            console.log("found!")
        }

//////////Changing this function to make it more handle-barsy
  function renderData(data) {
        console.log(data)

        document.getElementById('imgspace').innerHTML = '';
        document.getElementById('line1').innerHTML = '';
        document.getElementById('line2').innerHTML = '';
        document.getElementById('line3').innerHTML = '';
        document.getElementById('line4').innerHTML = '';

        const { name, country, population, value, timezone } = data[0].city;
        const { temp, temp_max, temp_min, humidity } = data[0].list[0].main;
        const { description, icon} = data[0].list[0].weather[0];
        const { deg, speed } = data[0].list[0].wind;

        const tempF = normalizeTemp(temp);
        const temp_maxF = normalizeTemp(temp_max);
        const temp_minF = normalizeTemp(temp_min);

        const mainIcon = document.createElement("img");
        mainIcon.setAttribute("src", "https://openweathermap.org/img/wn/" + icon + '@2x.png')

        document.getElementById('line1').innerHTML += name + " " + country;
        document.getElementById('line1').appendChild(mainIcon);
        document.getElementById('line2').innerHTML += "Temperature: " + tempF + " High: " + temp_maxF + " Low: " + temp_minF;
        document.getElementById('line3').innerHTML += "Humidity: " + humidity + "%";
        document.getElementById('line4').innerHTML += "Condition: " + description + ", windspeed: " + speed + " MPH, " + deg + "Â° " 
        buildFiveDay(data);
    }

    //test route code 

          const people = {
            persons: [
                "Nils", 
                "Teddy",
                "Nelson",
                "samson"
            ],
        }

        const pps = {
            name:"Josh",
            age:"27",
            position: "pusher"
        }


        //build buildFiveDay

                console.log("inFiveDay...");
        console.log(data);
        let tday = {
            day:[
                {
                    date: "12-19-2020",
                    temp: "78",
                    iconURL: "01d",
                    humidity: "78%",
                    uvIndex: "2%"
                },
                {
                    date: "12-19-2020",
                    temp: "78",
                    iconURL: "01d",
                    humidity: "78%",
                    uvIndex: "2%"
                },
                {
                    date: "12-19-2020",
                    temp: "78",
                    iconURL: "01d",
                    humidity: "78%",
                    uvIndex: "2%"
                }
            ]
        }

        console.log(tday.day[0]);
        console.log(tday.day[1]);
        console.log(tday.day[2]);